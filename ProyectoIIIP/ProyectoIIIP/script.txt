drop database proyecto 


create database proyecto 
go 

use proyecto 
go 

create table usuario(
id int primary key not null, 
nombre varchar(25) not null,
apellido varchar(25) not null,
usuario varchar(25) not null,
contraseña varchar(50) not null,
correo varchar(50) not null,
rol char (15) not null,
estado char(20) not null

)
alter table usuario add cifrado  varbinary(max) null
-----ccreacion de procedimiento agregar usuario

create procedure agregarUsuarios (
@id int,
@nombre varchar(25),
@apellido varchar(25),
@usuario varchar(25),
@contraseña varchar(25),
@correo varchar(25),
@rol char (15),
@estado char(20) 
)

AS
BEGIN
if exists (select usuario from usuario where usuario = @usuario and estado='activo')
raiserror ('Ya existe un usuario con ese usuario, porfavor ingrese uno nuevo',16,1)
else
insert into usuario(id, nombre,apellido,usuario,contraseña,correo,rol,estado) 
values(@id, @nombre,@apellido,@usuario,@contraseña,@correo,@rol,@estado)
END

exec agregarUsuarios 3, 'marlon','menjivar','mmenjivar','1234','meilimala@gmail.com','maquillista','activo'
exec agregarUsuarios 4, 'mario','menjivar','mmenji','1234','meilimala@gmail.com','cajero','activo'


select * from usuario


--actualizar usuaario---
create procedure actualizarUsuario (
@id as int ,
@nombre varchar(25),
@apellido varchar(25),
@usuario varchar(25),
@contraseña varchar(25),
@correo varchar(25),
@rol char (15),
@estado char(20)
)

AS
BEGIN
if exists(select usuario from usuario where usuario =@usuario and id =@id and estado = 'activo') 
raiserror('Usuario ya esta en uso',16,1)
else
update usuario
set nombre  = @nombre, apellido= @apellido, usuario = @usuario,
contraseña  = @contraseña,correo = @correo, rol=@rol,estado=@estado
where id = @id
end 
exec actualizarUsuario 3, 'marlon','martinez','mmenjiva','1234','meilimala@gmail.com','admin','activo'

select  * from usuario  

----crear procedimiento eliminar usuario
create procedure eliminarUsuario(@id int , @rol varchar(50))
AS
BEGIN
if exists (select usuario from usuario where @rol='admin')
raiserror ('El usuario "Admin" no se puede eliminaar,Accion denegada',16,1)
else 
update usuario set estado ='eliminado'
where  id =@id and rol <> 'admin'

END

execute eliminarUsuario 4,'cajero'
select * from usuario

----crear procedimiento consutar usuario

create procedure consultarUsuarios(@id as int)
AS 
BEGIN
select id, nombre, apellido,usuario, contraseña, correo,rol,estado from  usuario

where id = @id
END

exec consultarUsuarios  3
select *from usuario




select * from usuario
create procedure buscarUser
@nombreUsuario as varchar(50)
as begin
select id as 'idUsuario',nombre as 'Nombre', apellido as 'Apellido', usuario as 'usuario',contraseña as 'Contraseña', correo as 'correo', rol as 'puesto',estado as 'estado' 
from usuario
where usuario like '%' +@nombreUsuario+ '%'

end 
execute buscarUser 'mm'

select * from usuario


create table empleado(
id int primary key not null, 
nombre varchar(25) not null,
apellido varchar(25) not null,
edad int not null,
sexo varchar(25) not null,
cargo varchar(50) not null

)

----crear procedimiento para inseertar empleado

create procedure agregarEmpleado (
@id int,
@nombre varchar(25) ,
@apellido varchar(25), 
@edad int ,
@sexo varchar(25) ,
@cargo varchar(50) 

)

AS
BEGIN

insert into empleado (id, nombre,apellido,edad,sexo,cargo) 
values(@id, @nombre,@apellido,@edad,@sexo,@cargo)
END

exec agregarEmpleado 2, 'felipe','menjivar',22,'masculino','Make up artist';

exec agregarEmpleado 3, 'Rosa','melento',22,'masculino','Masajista';

select * from empleado

----crear procedimiento de actualizar empleado----

create procedure actualizarEmpleado (
@id int,
@nombre varchar(25) ,
@apellido varchar(25), 
@edad int ,
@sexo varchar(25) ,
@cargo varchar(50) 

)

AS
BEGIN
update empleado
set nombre = @nombre, apellido = @apellido, edad = @edad,
sexo = @sexo,cargo = @cargo
where id = @id
end 
exec actualizarEmpleado 2, 'felipe','menjivar',20,'Binario','Make up artist';
select  * from empleado


----crear procedimiento eliminar empleado
create procedure eliminarEmpleado(@id int )
AS
BEGIN
delete from empleado where id = @id
END

exec eliminarEmpleado 3
select * from empleado

----crear procedimiento consutar empleado

create procedure consultarEmpleado (@id as int)
AS 
BEGIN
select id, nombre, apellido,edad, sexo, cargo from  empleado

where id = @id
END

exec consultarEmpleado 2




select * from empleado
--procediemiento busqueda de empleado
create procedure buscarEmpleado
@nombre as varchar(50)
as begin
select concat(nombre,' ',apellido) as 'Nombre Completo', edad as 'edad',sexo as 'sexo',cargo as 'cargo'
from empleado
where nombre like '%' +@nombre+ '%'

end 
execute buscarEmpleado 'r'
create table cliente(
id int primary key not null, 
nombre varchar(25) not null,
apellido varchar(25) not null,

)

---procedimiento insertar cliente---

create procedure Insertarcliente (
@id int ,
@nombre varchar(25),
@apellido varchar(25)
)

AS
BEGIN
insert into cliente (id,nombre,apellido)values
(@id,@nombre,@apellido);
END

exec Insertarcliente 1,'Mauricio', 'Negro'
select * from cliente

---procedimiento para actualizar cliente------
create procedure actualizarCliente (
@id as int ,
@nombre varchar(25),
@apellido varchar(25)
)

AS
BEGIN
update cliente
set nombre  = @nombre, apellido= @apellido
where id = @id
end 
exec actualizarCliente 1,'Mauricio', 'Hernandez'
select  * from cliente


----procedimiento eliminar cliente----
create procedure eliminarCliente(@id int )
AS
BEGIN
delete from cliente where id = @id
END

exec eliminarCliente 1
select * from cliente

----crear procedimiento consutar cliente

create procedure consultarCliente (@id as int)
AS 
BEGIN
select id, nombre, apellido from  cliente

where id = @id
END

exec consultarCliente 1




select * from cliente
--procediemiento busqueda de cliente
create procedure buscarCliente
@nombre as varchar(50)
as begin
select concat(nombre,' ',apellido) as 'Nombre Completo'
from cliente
where nombre like '%' +@nombre+ '%'

end 
execute buscarCliente 'm'
create table producto(
id int primary key not null, 
tipoproducto varchar(50) not null,
nombre varchar(25) not null,
precio decimal not null,
cantidad int not null,
estado varchar(25) not null
)
----procedimiento para insertar producto
create procedure agregarProducto (
@id int, 
@tipoproducto varchar(50), 
@nombre varchar(25) ,
@precio decimal ,
@cantidad int ,
@estado varchar(25) 
)

AS
BEGIN

insert into producto (id, tipoproducto,nombre,precio,cantidad,estado) 
values(@id, @tipoproducto,@nombre,@precio,@cantidad,@estado)
END

exec agregarProducto 1, 'shampoo','nivea',200,'20','Activo';


select * from producto


-----procedimiento para actualizar  producto---

create procedure actualizarProducto (
@id int, 
@tipoproducto varchar(50), 
@nombre varchar(25) ,
@precio decimal ,
@cantidad int ,
@estado varchar(25) 

)

AS
BEGIN
update producto
set tipoproducto = @tipoproducto, nombre = @nombre, precio = @precio, cantidad = @cantidad,
estado = @estado
where id = @id
end 
exec actualizarProducto 1, 'shampoo','nivea',150,'20','Activo';
select  * from producto



----procedimiento eliminar producto----
create procedure eliminarProducto(@id int )
AS
BEGIN
delete from  producto where id = @id
END

exec eliminarProducto 1
select * from Producto

----crear procedimiento consutar producto

create procedure consultarProducto (@id as int)
AS 
BEGIN
select * from  producto

where id = @id
END

exec consultarProducto 1



--procediemiento busqueda de producto
create procedure buscarProductoss
@nombre as varchar(50)
as begin
select nombre as 'Nombre Producto',tipoproducto as 'Tipo de producto', precio as 'precio', cantidad as 'cantidad',estado as 'estado'
from producto
where nombre like '%' +@nombre+ '%' or  tipoproducto like '%' +@nombre+ '%'

end 
execute buscarProductoss 's'



create table proveedor(
id int primary key not null, 
nombre varchar(25) not null,
direccion varchar(50) not null, 
telefono int not null, 
correo varchar(60) not null,
RTN int not null,
idproducto int not null

constraint fk_proveedor_producto
	foreign key (idproducto)
	references producto(id),
)

----crear procedimiento para agregar proveedor----
create procedure agregarProveedor (
@id int ,
@nombre varchar(25) ,
@direccion varchar(50) , 
@telefono int , 
@correo varchar(60),
@RTN int ,
@idproducto int 
)

AS
BEGIN
insert into Proveedor (id,nombre,direccion,telefono,correo,RTN,idproducto)values
(@id,@nombre,@direccion,@telefono,@correo,@RTN,@idproducto);
END


exec agregarProveedor 1, 'CompanyFamily', 'san pedro sula', 27730989, 'company200@gmail.com', '32456', 1
select * from proveedor

----procedimiento para modificar proveedor---

create procedure actualizarProveedor (
@id int ,
@nombre varchar(25) ,
@direccion varchar(50) , 
@telefono int , 
@correo varchar(60),
@RTN int ,
@idproducto int 
)

AS
BEGIN
update proveedor
set nombre = @nombre, direccion = @direccion, telefono = @telefono,
correo = @correo, RTN =@RTN, idproducto =@idproducto
where id = @id
 end


exec actualizarProveedor 1, 'CompanyFamily', 'tegus', 27730989, 'company200@gmail.com', '32456', 1

select * from proveedor

----procedimiento eliminar proveedor----
create procedure eliminarProveedor(@id int )
AS
BEGIN
delete from  proveedor where id = @id
END

exec eliminarProveedor 1
select * from proveedor

----crear procedimiento consutar proveedor

create procedure consultarProveedor(@id as int)
AS 
BEGIN
select * from  proveedor

where id = @id
END

exec consultarProveedor 1
----busqueda de proveedor
create procedure buscarProveedor
@nombre as varchar(25)
as begin
select direccion as 'direccion', telefono as 'Telefono', correo as 'Correo',producto.id as 'producto'
from proveedor

INNER JOIN producto On proveedor.idproducto = producto.id
where direccion like '%' +@nombre+ '%' or  tipoproducto like '%' +@nombre+ '%'

end 
execute buscarProveedor 't'

create table servicios(
id int primary key not null,
tiposervicio varchar(50) not null,
nombre varchar(50),
precio decimal not null
)

---procedimiento para insertar servicios -----

create procedure insertarServicio (
@id int ,
@tiposervicio varchar(50) ,
@nombre varchar (50) ,
@precio decimal 
)

AS
BEGIN
insert into servicios (id,tiposervicio,nombre,precio)values
(@id,@tiposervicio,@nombre,@precio);
END


exec insertarServicio 1, 'Uñas', 'uñas acrilicas',300 


select * from servicios

----procedimiento para modifcar servicios---


create procedure actualizarServicios (
@id int ,
@tiposervicio varchar(50) ,
@nombre varchar (50) ,
@precio decimal 
)

AS
BEGIN
update servicios
set tiposervicio = @tiposervicio, nombre = @nombre, precio = @precio
where id = @id


End

exec actualizarServicios 1, 'Uñas', 'uñas acrilicas',250

select *from servicios

----procedimiento eliminar servicios----
create procedure eliminarServicios(@id int )
AS
BEGIN
delete from  servicios where id = @id
END

exec eliminarProducto 1
select * from servicios

----crear procedimiento consutar servicios

create procedure consultarServicios (@id as int)
AS 
BEGIN
select * from  servicios

where id = @id
END

exec consultarServicios 1

--procediemiento busqueda de servicios
create procedure buscarServicio
@nombre as varchar(50)
as begin
select tiposervicio as 'Tipo Del Servicio', nombre as 'nombre',precio as 'precio'
from servicios
where nombre like '%' +@nombre+ '%'

end 
execute buscarServicio 'u'


create table ventas(
id int primary key not null, 
idcliente int  not null, 
idempleado int not null,
idproducto int ,
idservicios int ,
precio decimal not null,
cantidad int not null,
formapago varchar not null,
descuento decimal not null,
total decimal not null


 
	constraint fk_factura_idcliente 
	foreign key (idcliente)
	references cliente(id),

	constraint fk_factura_idempleado
	foreign key (idempleado)
	references empleado(id),

	constraint fk_factura_idproducto
	foreign key (idproducto)
	references producto(id),

	constraint fk_factura_idservicios
	foreign key (idservicios)
	references servicios(id),


)
---procedimiento para insertar en facturad
create procedure insertarVentas (
@id int, 
@idcliente int  , 
@idempleado int ,
@idproducto int ,
@idservicios int ,
@precio decimal ,
@cantidad int ,
@formapago varchar ,
@descuento decimal ,
@total decimal 
)

AS
BEGIN
insert into ventas(id,idcliente,idempleado,idproducto,idservicios,precio,cantidad,formapago,descuento,total)values
(@id,@idcliente,@idempleado,@idproducto,@idservicios,@precio,@cantidad,@formapago,@descuento,@total);
END


exec insertarVentas 1, 1, 2, 1, 1,200,4,efectivo,0.15,200
 select * from ventas

 ---procedimiento para actualizar----
 
create procedure actualizarVenta (
@id int, 
@idcliente int  , 
@idempleado int ,
@idproducto int ,
@idservicios int ,
@precio decimal ,
@cantidad int ,
@formapago varchar ,
@descuento decimal ,
@total decimal 
)

AS
BEGIN
update ventas
set idcliente= @idcliente, idempleado = @idempleado, idproducto = @idproducto,
idservicios = @idservicios,precio=@precio,cantidad=@cantidad,formapago=@formapago,descuento=@descuento,total=@total
where id = @id

End

exec actualizarVenta 1, 1, 2, 1, 1,200,4,efectivo,0.25,300

select * from ventas


----procedimiento eliminar factura----
create procedure eliminarVentas(@id int )
AS
BEGIN
delete from  ventas where id = @id
END

exec eliminarVentas 1
select * from ventas

----crear procedimiento consutar Factura

create procedure consultarVentas (@id as int)
AS 
BEGIN
select * from  ventas

where id = @id
END

exec consultarVentas 1


--/ENCRIPTACION DE CONTRASEñA/--
USE master
GO

select * from sys.symmetric_keys
WHERE name = '##MS_ServiceMasterKey##'
GO

/*CREACION DE CONTRASENA PARA LA BASE DE DATOS */
USE proyecto ;
GO
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'manchester2000' ---excriptar toda la base 
GO

USE proyecto ;
GO
CREATE CERTIFICATE Certificado
WITH SUBJECT = 'Protect Data';
GO

/*CREACION DE CONTRASENA Y CERTIFICADO */
USE proyecto ;
GO
CREATE SYMMETRIC KEY ClaveContrasenaUsuario
WITH ALGORITHM = AES_128
ENCRYPTION BY CERTIFICATE Certificado;
GO


/*PARA ENCRIPTAR */

alter table usuario 
USE proyecto ;
GO

OPEN SYMMETRIC KEY ClaveContrasenaUsuario
DECRYPTION BY CERTIFICATE Certificado;
GO

UPDATE usuario

SET cifrado = ENCRYPTBYKEY (KEY_GUID('ClaveContrasenaUsuario'), contraseña)
FROM usuario;
GO

CLOSE SYMMETRIC KEY ClaveContrasenaUsuario;
GO

select * from usuario
/*PARA DESENCRIPTAR */
use proyecto ;
GO
OPEN SYMMETRIC KEY ClaveContrasenaUsuario
DECRYPTION BY CERTIFICATE Certificado;
GO


SELECT CAST(DecryptByKey(cifrado) AS vARCHAR(30)) AS DecryptedVal,cifrado FROM usuario;
GO

CLOSE SYMMETRIC KEY ClaveContrasenaUsuario;
GO


SELECT * FROM usuario