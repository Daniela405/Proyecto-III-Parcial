drop database proyecto 


create database proyecto 
go 

use proyecto 
go 

create table usuario(
id int primary key not null, 
nombre varchar(25) not null,
apellido varchar(25) not null,
usuario varchar(25) not null,
contraseña varchar(50) not null,
correo varchar(50) not null,
rol char (15) not null,
estado char(20) not null

)
alter table usuario add cifrado  varbinary(max) null
-----ccreacion de procedimiento agregar usuario

create procedure agregarUsuarios (
@id int,
@nombre varchar(25),
@apellido varchar(25),
@usuario varchar(25),
@contraseña varchar(25),
@correo varchar(25),
@rol char (15),
@estado char(20) 
)

AS
BEGIN
if exists (select usuario from usuario where usuario = @usuario and estado='activo')
raiserror ('Ya existe un usuario con ese usuario, porfavor ingrese uno nuevo',16,1)
else
insert into usuario(id, nombre,apellido,usuario,contraseña,correo,rol,estado) 
values(@id, @nombre,@apellido,@usuario,@contraseña,@correo,@rol,@estado)
END

exec agregarUsuarios 3, 'marlon','menjivar','mmenjivar','1234','meilimala@gmail.com','maquillista','activo'
exec agregarUsuarios 4, 'mario','menjivar','mmenji','1234','meilimala@gmail.com','cajero','activo'


select * from usuario


--actualizar usuaario---
create procedure actualizarUsuario (
@id as int ,
@nombre varchar(25),
@apellido varchar(25),
@usuario varchar(25),
@contraseña varchar(25),
@correo varchar(25),
@rol char (15),
@estado char(20)
)

AS
BEGIN
if exists(select usuario from usuario where usuario =@usuario and id =@id and estado = 'activo') 
raiserror('Usuario ya esta en uso',16,1)
else
update usuario
set nombre  = @nombre, apellido= @apellido, usuario = @usuario,
contraseña  = @contraseña,correo = @correo, rol=@rol,estado=@estado
where id = @id
end 
exec actualizarUsuario 3, 'marlon','martinez','mmenjiva','1234','meilimala@gmail.com','admin','activo'

select  * from usuario  

----crear procedimiento eliminar usuario
create procedure eliminarUsuario(@id int , @rol varchar(50))
AS
BEGIN
if exists (select usuario from usuario where @rol='admin')
raiserror ('El usuario "Admin" no se puede eliminaar,Accion denegada',16,1)
else 
update usuario set estado ='eliminado'
where  id =@id and rol <> 'admin'

END

execute eliminarUsuario 4,'cajero'
select * from usuario

----crear procedimiento consutar usuario

create procedure consultarUsuarios(@id as int)
AS 
BEGIN
select id, nombre, apellido,usuario, contraseña, correo,rol,estado from  usuario

where id = @id
END

exec consultarUsuarios  3
select *from usuario




select * from usuario
create procedure buscarUser
@nombreUsuario as varchar(50)
as begin
select id as 'idUsuario',nombre as 'Nombre', apellido as 'Apellido', usuario as 'usuario',contraseña as 'Contraseña', correo as 'correo', rol as 'puesto',estado as 'estado' 
from usuario
where usuario like '%' +@nombreUsuario+ '%'

end 
execute buscarUser 'mm'

select * from usuario



create table empleado(
Id int primary key not null, 
Identidad varchar(15) not null,
Nombre varchar(25) not null,
Apellido varchar(25) not null,
NombreUsuario varchar(25) not null,
Edad int not null,
Sexo varchar(25) not null,
Telefono int not null,
Correo varchar(25) not null,
Cargo varchar(50) not null,
Estado char(20) not null
)


----crear procedimiento para inseertar empleado

create procedure agregarEmpleado (
@Id int,
@Identidad varchar(13),
@Nombre varchar(25) ,
@Apellido varchar(25), 
@NombreUsuario varchar(25),
@Edad int ,
@Sexo varchar(25),
@Telefono int,
@Correo varchar(25),
@Cargo varchar(50),
@Estado char(20)
)

AS
BEGIN

insert into empleado (Id, Identidad, Nombre, Apellido, NombreUsuario, Edad, Sexo, Telefono, Correo, Cargo, Estado) 
values(@Id, @Identidad, @Nombre,@Apellido, @NombreUsuario, @Edad, @Sexo, @Telefono, @Correo, @Cargo, @Estado)
END

exec agregarEmpleado 1, '1305200200359','Marivel','Hernandez', 'marivel34',22,'Femenino',98765436, 'marivelHe@gmail.com','Estilista','Activo';
exec agregarEmpleado 2, '1305200200330','Fernando','Flores', 'ferFlor',22,'Masculino',97372336, 'fernando@gmail.com','Masajista','Activo';
exec agregarEmpleado 3, '1305200200331','Fernanda','Flores', 'ferFlawer',22,'Femenino',97372332, 'fernandaf@gmail.com','Cortadora','Activo';

select * from empleado

----crear procedimiento de actualizar empleado----

create procedure actualizarEmpleado (
@Id int,
@Identidad varchar(13),
@Nombre varchar(25) ,
@Apellido varchar(25), 
@NombreUsuario varchar(25),
@Edad int ,
@Sexo varchar(25),
@Telefono int,
@Correo varchar(25),
@Cargo varchar(50),
@Estado char(20)

)

AS
BEGIN
update empleado
set Nombre = @Nombre, Apellido = @Apellido, NombreUsuario = @NombreUsuario, Edad = @Edad,
Sexo = @Sexo, Telefono = @Telefono, Correo = @Correo, Cargo = @Cargo, Estado = @Estado
where Identidad = @Identidad and Id = @Id
end 
exec actualizarEmpleado 1, '1305200200359','Marivel','Hernandez', 'marivell',25,'Femenino',98765436, 'marivelHe@gmail.com','Estilista','Activo';
select  * from empleado


----crear procedimiento eliminar empleado (ID)
create procedure eliminarEmpleado(@id int )
AS
BEGIN
delete from empleado where id = @id
END

exec eliminarEmpleado 1;
exec eliminarEmpleado 2;
exec eliminarEmpleado 3;
select * from empleado
---- eliminar empleado (Estado)
Create procedure eliminarEmpleados (@Id int)
	as begin 
			update empleado set Estado = 'Eliminado'
			where Id = @Id
	End 

	exec eliminarEmpleados 1;
	exec eliminarEmpleados 2;
	exec eliminarEmpleados 3;
	select * from empleado


----crear procedimiento consutar empleado

create procedure consultaEmpleado (@Identidad varchar(13))
AS 
BEGIN
select * from empleado Where empleado.Identidad = @Identidad
END

exec consultaEmpleado '1305200200359';

select * from empleado


--procediemiento busqueda de empleado
create procedure buscarEmpleado
@Nombre as varchar(50)
as begin
select Identidad as 'No. Identidad', concat(Nombre,' ',Apellido) as 'Nombre Completo', Edad, Sexo, Telefono as 'Teléfono', Correo, Cargo, Estado 
from empleado
where Nombre like '%' +@Nombre+ '%'

end 
execute buscarEmpleado 'j'
---------------------------------------------------------------------------------------------------------------



------------------------------------------------------CLIENTE---------------------------------------------------------

create table cliente(
id int primary key not null, 
nombre varchar(25) not null,
apellido varchar(25) not null,

)



---procedimiento insertar cliente---

create procedure Insertarcliente (
@id int ,
@nombre varchar(25),
@apellido varchar(25)
)

AS
BEGIN
if exists (select id from cliente where id = @id)
		raiserror('Ya existe un registro, porfavor verifique los datos',16,1)
	
	else
		insert into cliente (id,nombre,apellido)values
(@id,@nombre,@apellido);

END



exec Insertarcliente 1,'Mauricio', 'Guevara'
select * from cliente



---procedimiento para actualizar cliente------
create procedure actualizarCliente (
@id as int ,
@nombre varchar(25),
@apellido varchar(25)
)

AS
BEGIN
update cliente
set nombre  = @nombre, apellido= @apellido
where id = @id
end 

exec actualizarCliente 1,'Mauricio', 'Hernandez'
select  * from cliente



----procedimiento eliminar cliente----
create procedure eliminarCliente(@id int )
AS
BEGIN
delete from cliente where id = @id
END


exec eliminarCliente 1
select * from cliente



----crear procedimiento consutar cliente

drop proc consultarCliente

create procedure consultarCliente 
AS 
BEGIN
select id as 'Codigo', nombre as 'Nombre', apellido as 'Apellido' from  cliente


END

exec consultarCliente 1


select * from cliente



--procediemiento busqueda de cliente

create procedure buscarCliente
@nombre as varchar(50)
as begin
select concat(nombre,' ',apellido) as 'Nombre Completo'
from cliente
where nombre like '%' +@nombre+ '%'

end 


execute buscarCliente 'm'


--+++++++++++++++++++++++++ FIN CLINTES++++++++++++++++++++++++++++++++++




create table productos(
id int primary key not null, 
codigobarra varchar(25),
tipoproducto varchar(50) not null,
nombre varchar(25) not null,
precio decimal not null,
precioventa decimal not null,
cantidad int not null,
caracteristica varchar(50),
estado varchar(25) default 'En Existencia'
)
----procedimiento para insertar producto
create procedure agregarProductos (
@id int, 
@codigobarra varchar(25),
@tipoproducto varchar(50), 
@nombre varchar(25) ,
@precio decimal ,
@precioventa decimal,
@cantidad int ,
@caracteristica varchar(50)
)

AS
BEGIN

insert into productos(id,codigobarra, tipoproducto,nombre,precio,precioventa,cantidad,caracteristica) 
values(@id,@codigobarra, @tipoproducto,@nombre,@precio,@precioventa,@cantidad,@caracteristica)
END

exec agregarProductos 1,'11pd20', 'shampoo','nivea',200,259,'20','risos definidos';
exec agregarProductoss 2, 'shampoo','Sedal',200,'20';

select * from productos


-----procedimiento para actualizar  producto---

create procedure actualizarProducto (
@id int, 
@codigobarra varchar(25),
@tipoproducto varchar(50), 
@nombre varchar(25) ,
@precio decimal ,
@precioventa decimal,
@cantidad int ,
@caracteristica varchar(50)
)

AS
BEGIN

update productos
set codigobarra=@codigobarra ,tipoproducto = @tipoproducto, nombre = @nombre, precio = @precio,precioventa = @precioventa ,cantidad = @cantidad,
caracteristica = @caracteristica
where id = @id
end 
exec actualizarProducto 1,'11pd20', 'shampoo','nivea',200,250,'22','risos definidos';
select  * from productos



----procedimiento eliminar producto----
create procedure eliminarProducto(@id int )
AS
BEGIN
delete from  productos where id = @id
END

exec eliminarProducto 1
select * from Producto

----crear procedimiento consutar producto

create procedure consultarProducto (@id as int)
AS 
BEGIN
select * from  producto

where id = @id
END

exec consultarProducto 1



--procediemiento busqueda de producto
create procedure buscarProductos
@nombre as varchar(50)
as begin
select id as 'id', codigobarra as 'Codigo de Barra', tipoproducto as 'Tipo de producto',nombre as 'Nombre Producto', precioventa as 'precio', cantidad as 'cantidad',caracteristica as 'Caracteristica' , estado as 'estado'
from [dbo].[productos]
where nombre like '%' +@nombre+ '%' or  tipoproducto like '%' +@nombre+ '%'

end 
execute buscarProductos 's'

select min(id) from productos




create table proveedor(
id int primary key not null, 
nombre varchar(25) not null,
direccion varchar(50) not null, 
telefono int not null, 
correo varchar(60) not null,
RTN int not null,
idproducto int not null

constraint fk_proveedor_producto
	foreign key (idproducto)
	references productos(id),
)

----crear procedimiento para agregar proveedor----
create procedure agregarProveedor (
@id int ,
@nombre varchar(25) ,
@direccion varchar(50) , 
@telefono int , 
@correo varchar(60),
@RTN int ,
@idproducto int 
)

AS
BEGIN
insert into Proveedor (id,nombre,direccion,telefono,correo,RTN,idproducto)values
(@id,@nombre,@direccion,@telefono,@correo,@RTN,@idproducto);
END


exec agregarProveedor 1, 'CompanyFamily', 'san pedro sula', 27730989, 'company200@gmail.com', '32456', 1
select * from proveedor

----procedimiento para modificar proveedor---

create procedure actualizarProveedor (
@id int ,
@nombre varchar(25) ,
@direccion varchar(50) , 
@telefono int , 
@correo varchar(60),
@RTN int ,
@idproducto int 
)

AS
BEGIN
update proveedor
set nombre = @nombre, direccion = @direccion, telefono = @telefono,
correo = @correo, RTN =@RTN, idproducto =@idproducto
where id = @id
 end


exec actualizarProveedor 1, 'CompanyFamily', 'tegus', 27730989, 'company200@gmail.com', '32456', 1

select * from proveedor

----procedimiento eliminar proveedor----
create procedure eliminarProveedor(@id int )
AS
BEGIN
delete from  proveedor where id = @id
END

exec eliminarProveedor 1
select * from proveedor

----crear procedimiento consutar proveedor

create procedure consultarProveedor(@id as int)
AS 
BEGIN
select * from  proveedor

where id = @id
END

exec consultarProveedor 1
----busqueda de proveedor
create procedure buscarProveedor
@nombre as varchar(25)
as begin
select direccion as 'direccion', telefono as 'Telefono', correo as 'Correo',producto.id as 'producto'
from proveedor

INNER JOIN producto On proveedor.idproducto = producto.id
where direccion like '%' +@nombre+ '%' or  tipoproducto like '%' +@nombre+ '%'

end 
execute buscarProveedor 't'

---procedimientos para la de tabla servicios -----

create table servicios(
id int primary key not null,
tiposervicio varchar(50) not null,
nombre varchar(50)not null,
precio decimal not null,
estado varchar(25)

)
drop procedure 
select * from servicios
---procedimiento para insertar servicios -----

create procedure insertarServicio (
@id int,
@tiposervicio varchar(50),
@nombre varchar (50),
@precio decimal,
@estado varchar(25)
)
AS
BEGIN
	if exists (select id from servicios where id = @id and estado='Disponible')
		raiserror('Ya existe un registro, porfavor verifique los datos',16,1)
	else if exists (select nombre from servicios where nombre=@nombre and estado='Disponible')
	raiserror('Ya existe un registro, porfavor verifique los datos',16,1)
	else
		insert into servicios values (@id,@tiposervicio,@nombre,@precio,@estado)
END

exec insertarServicio 1, 'Uñas', 'decoracion de uñas',300,'Disponible'
exec insertarServicio 2, 'Pelo', 'Secado de pelo',150,'Disponible'
exec insertarServicio 3, 'Pelo', 'Planchado de pelo',200,'Disponible'

drop procedure insertarServicio 
select * from servicios

----procedimiento para modifcar servicios---


create procedure actualizarServicios (
@id int ,
@tiposervicio varchar(50) ,
@nombre varchar (50) ,
@precio decimal 
)

AS
BEGIN
update servicios
set tiposervicio = @tiposervicio, nombre = @nombre, precio = @precio
where id = @id
End

exec actualizarServicios 1, 'Uñas', 'uñas acrilicas',250

select *from servicios

----procedimiento eliminar servicios----
create procedure eliminarServicios(@id as int,@estado as varchar(25))
AS
BEGIN
if exists( select nombre from servicios where @estado= 'No Disponible')
	raiserror('Este servicio ya fue eliminado',16,1)
	else
update servicios set estado = 'No Disponible'
	where id = @id 
END

exec eliminarServicios 5,'Disponible' 
select * from servicios
create procedure eliminarUsuario

----crear procedimiento consutar servicios

create procedure consultarServicios
AS 
BEGIN
select id as 'Codigo', tiposervicio as 'Tipo del Servicio', nombre as 'Nombre',precio as 'Precio', estado as 'Estado'
from servicios
END

exec consultarServicios 

--procediemiento busqueda de servicios
create procedure buscarServicio
@nombre as varchar(50)
as begin
select id as 'Codigo', tiposervicio as 'Tipo del Servicio', nombre as 'Nombre',precio as 'Precio', estado as 'Estado'
from servicios
where nombre like '%' +@nombre+ '%'

end 
execute buscarServicio 'p'

------------------------------------------

create table venta(
id int primary key not null, 
idcliente int  not null, 
idempleado int not null,
fecha date,
formapago varchar(45) not null,
numerofactura decimal not null
 
	constraint fk_factura_idcliente 
	foreign key (idcliente)
	references cliente(id),

	constraint fk_factura_idempleado
	foreign key (idempleado)
	references empleado(id),



)
select * from venta
SELECT MAX(id) FROM venta
---procedimiento para insertar en facturad
create procedure insertarVentas (
@id int, 
@idcliente int  , 
@idempleado int ,
@fecha date,
@formapago varchar(50),
@numerofactura decimal
)

AS
BEGIN
insert into venta(id,idcliente,idempleado,fecha,formapago,numerofactura)values
(@id,@idcliente,@idempleado,@fecha,@formapago,@numerofactura);
END


exec insertarVentas 1, 1, 2,'2020-07-03','Efectivo',1
 select * from venta



 create procedure consultardetalleProduct
AS 
BEGIN
select id as Id ,codigobarra as 'codigo de barra',[tipoproducto] as 'tipo de Producto',[nombre] as 'Nombre',  [precioventa] as 'precio de venta' ,[cantidad] as 'cantidad disponible' ,[caracteristica] as 'Caracteristica' from  productos

END

exec consultardetalleProduct


create procedure buscardetallrProductos
@nombre as varchar(50)
as begin
select id as 'id', codigobarra as 'Codigo de Barra', tipoproducto as 'Tipo de producto',nombre as 'Nombre Producto', precioventa as 'precio', cantidad as 'cantidad',caracteristica as 'Caracteristica' 
from [dbo].[productos]
where nombre like '%' +@nombre+ '%' or id like '%' +@nombre+ '%'

end 
execute buscardetallrProductos '1'
SELECT nombre FROM venta inner join cliente on venta.idcliente=cliente.id and venta.id = 1
---proceddimiento para actualizar stock desde detalle producto
create procedure actualiardp (
@id int, 
@cantidad int 
)

AS
BEGIN

update productos
set cantidad = @cantidad
where id = @id
end 
exec actualiardp 1,'199';
select  * from productos
drop table detalleventa
create table detalleventa(
iddetalleventa int primary key not null, 
idventa int  not null, 
nombrearticulo Varchar(100),
cantidad int not null,
precio decimal not null,
 
	constraint fk_detalle_idventa 
	foreign key (idventa)
	references venta(id),






)


---llena el grid de productos en detalleventa
create procedure llenargrid(
@idventa int
)
AS
BEGIN
select nombrearticulo as 'Nombre Articulo', detalleventa.cantidad as 'Cantidad', detalleventa.precio,(detalleventa.cantidad) * (detalleventa.precio) as total   from detalleventa
where detalleventa.idventa=@idventa
end
drop procedure llenargrid
execute llenargrid 1
select * from detalleventa where idventa=1

create procedure detVentas (
@iddetalleventa int , 
@idventa int , 
@nombrearticulo varchar(100) ,
@cantidad int ,
@precio decimal 
)

AS
BEGIN
insert into detalleventa(iddetalleventa,idventa,nombrearticulo,cantidad,precio)values
(@iddetalleventa,@idventa,@nombrearticulo,@cantidad,@precio);
END


exec detVentas 1, 1, 'nivea',2,200
 select * from detalleventa
 SELECT MAX(iddetalleventa)as 'id' FROM detalleventa
select * from detalleventa

Select * from productos

----procedimiento eliminar detalleventa----
create procedure eliminardetalleproducto(@iddetalleventa int )
AS
BEGIN
delete from  detalleventa where iddetalleventa = @iddetalleventa
END

exec eliminardetalleproducto 15
select * from detalleventa

----procedimiento modificar cantidad en detalle producto----
create procedure modificarcantidad(@id int,@cantidad int )
AS
BEGIN
update detalleventa
set cantidad = @cantidad
where iddetalleventa = @id
END

exec modificarcantidad 22,3
select * from detalleventa


---procedimiento para insertar en facturad
create procedure insertarVentas (
@id int, 
@idcliente int  , 
@idempleado int ,
@idproducto int ,
@idservicios int ,
@precio decimal ,
@cantidad int ,
@formapago varchar ,
@descuento decimal ,
@total decimal 
)

AS
BEGIN
insert into ventas(id,idcliente,idempleado,idproducto,idservicios,precio,cantidad,formapago,descuento,total)values
(@id,@idcliente,@idempleado,@idproducto,@idservicios,@precio,@cantidad,@formapago,@descuento,@total);
END


exec insertarVentas 1, 1, 2, 1, 1,200,4,efectivo,0.15,200
 select * from ventas

 ---procedimiento para actualizar----
 
create procedure actualizarVenta (
@id int, 
@idcliente int  , 
@idempleado int ,
@idproducto int ,
@idservicios int ,
@precio decimal ,
@cantidad int ,
@formapago varchar ,
@descuento decimal ,
@total decimal 
)

AS
BEGIN
update ventas
set idcliente= @idcliente, idempleado = @idempleado, idproducto = @idproducto,
idservicios = @idservicios,precio=@precio,cantidad=@cantidad,formapago=@formapago,descuento=@descuento,total=@total
where id = @id

End

exec actualizarVenta 1, 1, 2, 1, 1,200,4,efectivo,0.25,300

select * from ventas


----crear procedimiento consutar Factura

create procedure consultarVentas (@id as int)
AS 
BEGIN
select * from  ventas

where id = @id
END

exec consultarVentas 1


--/ENCRIPTACION DE CONTRASEñA/--
USE master
GO

select * from sys.symmetric_keys
WHERE name = '##MS_ServiceMasterKey##'
GO

/*CREACION DE CONTRASENA PARA LA BASE DE DATOS */
USE proyecto ;
GO
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'manchester2000' ---excriptar toda la base 
GO

USE proyecto ;
GO
CREATE CERTIFICATE Certificado
WITH SUBJECT = 'Protect Data';
GO

/*CREACION DE CONTRASENA Y CERTIFICADO */
USE proyecto ;
GO
CREATE SYMMETRIC KEY ClaveContrasenaUsuario
WITH ALGORITHM = AES_128
ENCRYPTION BY CERTIFICATE Certificado;
GO


/*PARA ENCRIPTAR */

alter table usuario 
USE proyecto ;
GO

OPEN SYMMETRIC KEY ClaveContrasenaUsuario
DECRYPTION BY CERTIFICATE Certificado;
GO

UPDATE usuario

SET cifrado = ENCRYPTBYKEY (KEY_GUID('ClaveContrasenaUsuario'), contraseña)
FROM usuario;
GO

CLOSE SYMMETRIC KEY ClaveContrasenaUsuario;
GO

select * from usuario
/*PARA DESENCRIPTAR */
use proyecto ;
GO
OPEN SYMMETRIC KEY ClaveContrasenaUsuario
DECRYPTION BY CERTIFICATE Certificado;
GO


SELECT CAST(DecryptByKey(cifrado) AS vARCHAR(30)) AS DecryptedVal,cifrado FROM usuario;
GO

CLOSE SYMMETRIC KEY ClaveContrasenaUsuario;
GO


SELECT * FROM usuario